80: Remove Duplicates from Sorted Array II

Problem Summary:
You are given an integer array nums sorted in non-decreasing order. 
Remove duplicates in-place such that each unique element appears at most twice. 
Return the new length of the array.

Do not allocate extra space for another array. 
You must do this by modifying the input array in-place with O(1) extra memory.


Example:
Input:
nums = [1,1,1,2,2,3]
Output:
5
Modified nums: [1,1,2,2,3,_]


Approach:

Use two pointers:

i → for writing the position (result index)

j → for scanning the array

If nums[j] != nums[i-2], then it's safe to keep the element (i.e., it’s not more than twice).


def removeDuplicates(nums):
    if len(nums) <= 2:
        return len(nums)
    
    i = 2  # Start from index 2
    for j in range(2, len(nums)):
        if nums[j] != nums[i - 2]:
            nums[i] = nums[j]
            i += 1
    return i


Example Trace:
Input: nums = [0,0,1,1,1,1,2,3,3]

Output: 7

Modified array: [0,0,1,1,2,3,3,_ , _]

